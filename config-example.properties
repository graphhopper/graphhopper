#################
### OSMReader ###

# graph.dataaccess=MMAP_STORE_SYNC
graph.dataaccess=RAM_STORE

# The high-resolution index is bigger and slightly slower but a lot more precise. see #17.
# Resolution is in meter, decrease from 1000 to 500 in order to speed up queries (but will increase size)
#index.highResolution=-1
index.highResolution=500


# use contraction hierarchies to speed things up. requires more RAM/disc space for holding the graph
# uncomment this if you need more control of you algorithm. then use graphhopper.chShortcuts(false, false)
prepare.chShortcuts=fastest

# advanced options:
# prepare.updates.periodic=3
# prepare.updates.lazy=10
# prepare.updates.neighbor=20
# prepare.minOnewayNetworkSize=200

# increase from 1 to 5, to reduce way geometry e.g. for android
osmreader.wayPointMaxDistance=1

# possible options: car,foot,bike,mtb,racingbike (comma separated)
# when using two or three option together remeber to set "prepare.chShortcuts=no" above.
# There is also a new option bike2 which takes elevation data into account (like up-hill is slower than down-hill)
# and requires enabling graph.elevation.provider below, see #169
osmreader.acceptWay=car

# if you want to reduce storage size and you don't need instructions for a path uncomment this
# osmreader.instructions=false

# To populate your graph with elevation data use SRTM, default is noop
# graph.elevation.provider=srtm
# default location for cache is used /tmp/srtm
# graph.elevation.cachedir=./srtmprovider/
# If you have a slow disk or plenty of RAM change the default MMAP to
# graph.elevation.dataaccess=RAM_STORE


