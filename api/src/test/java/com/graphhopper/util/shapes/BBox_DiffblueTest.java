/*
 * Copyright 2018 Diffblue Limited
 *
 * Diffblue Limited licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.graphhopper.util.shapes;

import com.graphhopper.util.shapes.BBox;
import com.graphhopper.util.shapes.Shape;
import org.junit.Assert;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

public class BBox_DiffblueTest {

  @Rule public ExpectedException thrown = ExpectedException.none();

  /* testedClasses: BBox */

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 154 branch to line 155
   *  - conditional line 155 branch to line 155
   */

  @Test
  public void containsInputNotNullOutputFalse() {

    // Arrange
    final BBox objectUnderTest =
        new BBox(0x1.ff7ff7777ffffp+0 /* 1.99805 */, 0x1.1ffffffff7fffp+511 /* 7.54189e+153 */,
                 0x1.9fffffff8ffffp+0 /* 1.625 */, -0x1p-1021 /* -4.45015e-308 */, 0.0, 0.0, false);
    final BBox s = new BBox(
        0x1.ff7ff7777ffffp+0 /* 1.99805 */, 0x1.1ffffffffbfc2p-513 /* 4.19532e-155 */,
        -0x1.9f15bfff8bfffp+0 /* -1.62143 */, 0.0, 0x0.003p-1022 /* 1.62969e-311 */, 0.0, false);

    // Act
    final boolean retval = objectUnderTest.contains(s);

    // Assert result
    Assert.assertEquals(false, retval);
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 154 branch to line 156
   *  - conditional line 156 branch to line 160
   */

  @Test
  public void containsInputNullOutputUnsupportedOperationException() {

    // Arrange
    final BBox objectUnderTest = new BBox(
        0x1.bffc020006fffp+256 /* 2.02629e+77 */, 0x1.fffffffffffffp+768 /* 3.10504e+231 */,
        0x1.ffffbffffffffp+512 /* 2.68156e+154 */, 0x0.000000000002p-1022 /* 1.58101e-322 */, 0.0,
        0.0, false);
    final Shape s = null;

    // Act
    thrown.expect(UnsupportedOperationException.class);
    objectUnderTest.contains(s);

    // Method is not expected to return due to exception thrown
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 211 branch to line 212
   */

  @Test
  public void equalsInputNullOutputFalse() {

    // Arrange
    final BBox objectUnderTest = new BBox(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, false);
    final Object obj = null;

    // Act
    final boolean retval = objectUnderTest.equals(obj);

    // Assert result
    Assert.assertEquals(false, retval);
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 143 branch to line 144
   *  - conditional line 144 branch to line 144
   */

  @Test
  public void intersectInputNotNullOutputFalse2() {

    // Arrange
    final BBox objectUnderTest =
        new BBox(0.0, 0x0.085d57f02p-1022 /* 7.27028e-310 */,
                 0x1.0006fff1ff7fp+61 /* 2.30609e+18 */, Double.NEGATIVE_INFINITY, 0.0, 0.0, false);
    final BBox s =
        new BBox(0x0.4p-1022 /* 5.56268e-309 */, 0.0, 0x1p-1015 /* 2.84809e-306 */,
                 0x1p-1015 /* 2.84809e-306 */, 0x1.003p-1007 /* 7.29646e-304 */, 0.0, false);

    // Act
    final boolean retval = objectUnderTest.intersect(s);

    // Assert result
    Assert.assertEquals(false, retval);
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 143 branch to line 145
   *  - conditional line 145 branch to line 149
   */

  @Test
  public void intersectInputNullOutputUnsupportedOperationException() {

    // Arrange
    final BBox objectUnderTest = new BBox(0x1.fffffff000002p-1003 /* 2.33316e-302 */,
                                          -0x1.00000000108p-1021 /* -4.45015e-308 */, Double.NaN,
                                          0x0.1p-1022 /* 1.39067e-309 */, 0.0, 0.0, false);
    final Shape s = null;

    // Act
    thrown.expect(UnsupportedOperationException.class);
    objectUnderTest.intersect(s);

    // Method is not expected to return due to exception thrown
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 232 branch to line 232
   *  - conditional line 232 branch to line 233
   */

  @Test
  public void isValidOutputFalse() {

    // Arrange
    final BBox objectUnderTest = new BBox(0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

    // Act
    final boolean retval = objectUnderTest.isValid();

    // Assert result
    Assert.assertEquals(false, retval);
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 232 branch to line 232
   *  - conditional line 232 branch to line 236
   *  - conditional line 236 branch to line 236
   *  - conditional line 236 branch to line 239
   *  - conditional line 239 branch to line 241
   *  - conditional line 241 branch to line 241
   *  - conditional line 241 branch to line 244
   *  - conditional line 244 branch to line 245
   *  - conditional line 245 branch to line 249
   *  - conditional line 249 branch to line 252
   */

  @Test
  public void isValidOutputFalse2() {

    // Arrange
    final BBox objectUnderTest =
        new BBox(0.0, 0x0.0000000000001p-1022 /* 4.94066e-324 */, Double.NEGATIVE_INFINITY,
                 -0x1.fffffffffffffp+1023 /* -1.79769e+308 */, 0.0, Double.NaN, true);

    // Act
    final boolean retval = objectUnderTest.isValid();

    // Assert result
    Assert.assertEquals(false, retval);
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 232 branch to line 232
   *  - conditional line 232 branch to line 236
   *  - conditional line 236 branch to line 236
   *  - conditional line 236 branch to line 239
   *  - conditional line 239 branch to line 241
   *  - conditional line 241 branch to line 241
   *  - conditional line 241 branch to line 244
   *  - conditional line 244 branch to line 245
   *  - conditional line 245 branch to line 246
   */

  @Test
  public void isValidOutputFalse3() {

    // Arrange
    final BBox objectUnderTest =
        new BBox(0.0, 0x0.0000000000001p-1022 /* 4.94066e-324 */, Double.NEGATIVE_INFINITY,
                 -0x1.fffffffffffffp+1023 /* -1.79769e+308 */, Double.NaN, Double.NaN, true);

    // Act
    final boolean retval = objectUnderTest.isValid();

    // Assert result
    Assert.assertEquals(false, retval);
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 232 branch to line 232
   *  - conditional line 232 branch to line 236
   *  - conditional line 236 branch to line 236
   *  - conditional line 236 branch to line 237
   */

  @Test
  public void isValidOutputFalse5() {

    // Arrange
    final BBox objectUnderTest =
        new BBox(0.0, 0x0.0000000000001p-1022 /* 4.94066e-324 */,
                 -0x1.0220000020008p+1023 /* -9.06308e+307 */,
                 -0x1.0220000020008p+1023 /* -9.06308e+307 */, Double.NaN, Double.NaN, true);

    // Act
    final boolean retval = objectUnderTest.isValid();

    // Assert result
    Assert.assertEquals(false, retval);
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 232 branch to line 232
   *  - conditional line 232 branch to line 236
   *  - conditional line 236 branch to line 236
   *  - conditional line 236 branch to line 239
   *  - conditional line 239 branch to line 241
   *  - conditional line 241 branch to line 241
   *  - conditional line 241 branch to line 242
   */

  @Test
  public void isValidOutputFalse6() {

    // Arrange
    final BBox objectUnderTest = new BBox(0.0, 0x0.0000000000001p-1022 /* 4.94066e-324 */,
                                          Double.NaN, -0x1.0220000020008p+1023 /* -9.06308e+307 */,
                                          -1.25, Double.NEGATIVE_INFINITY, true);

    // Act
    final boolean retval = objectUnderTest.isValid();

    // Assert result
    Assert.assertEquals(false, retval);
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 105 branch to line 113
   */

  @Test
  public void updateInputZeroZeroZeroOutputIllegalStateException() {

    // Arrange
    final BBox objectUnderTest = new BBox(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, false);
    final double lat = 0.0;
    final double lon = 0.0;
    final double elev = 0.0;

    // Act
    thrown.expect(IllegalStateException.class);
    objectUnderTest.update(lat, lon, elev);

    // Method is not expected to return due to exception thrown
  }
}
