/*
 * Copyright 2018 Diffblue Limited
 *
 * Diffblue Limited licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.graphhopper.util;

import com.graphhopper.util.Helper;
import org.junit.Assert;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import java.nio.ByteBuffer;

public class Helper_DiffblueTest {

  @Rule public ExpectedException thrown = ExpectedException.none();

  /* testedClasses: Helper */

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 402 branch to line 403
   */

  @Test
  public void camelCaseToUnderScoreInputNotNullOutputNotNull() {

    // Arrange
    final String key = "";

    // Act
    final String retval = Helper.camelCaseToUnderScore(key);

    // Assert result
    Assert.assertEquals("", retval);
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 78 branch to line 79
   */

  @Test
  public void countBitValueInputNegativeOutputIllegalArgumentException() {

    // Arrange
    final int maxTurnCosts = -10_000_000;

    // Act
    thrown.expect(IllegalArgumentException.class);
    Helper.countBitValue(maxTurnCosts);

    // Method is not expected to return due to exception thrown
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 246 branch to line 247
   */

  @Test
  public void createPointListInput1OutputIllegalArgumentException() {

    // Arrange
    final double[] list = {0x0.0000000000001p-1022 /* 4.94066e-324 */};

    // Act
    thrown.expect(IllegalArgumentException.class);
    Helper.createPointList(list);

    // Method is not expected to return due to exception thrown
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 335 branch to line 335
   *  - conditional line 335 branch to line 336
   */

  @Test
  public void firstBigInputNotNullOutputNotNull() {

    // Arrange
    final String sayText = "";

    // Act
    final String retval = Helper.firstBig(sayText);

    // Assert result
    Assert.assertEquals("", retval);
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 335 branch to line 335
   *  - conditional line 335 branch to line 339
   *  - conditional line 339 branch to line 339
   */

  @Test
  public void firstBigInputNotNullOutputNotNull2() {

    // Arrange
    final String sayText = "!";

    // Act
    final String retval = Helper.firstBig(sayText);

    // Assert result
    Assert.assertEquals("!", retval);
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 313 branch to line 314
   */

  @Test
  public void intToEleInputPositiveOutputPositive() {

    // Arrange
    final int integEle = 2_147_483_647;

    // Act
    final double retval = Helper.intToEle(integEle);

    // Assert result
    Assert.assertEquals(0x1.fffffffffffffp+1023 /* 1.79769e+308 */, retval, 0.0);
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 209 branch to line 216
   */

  @Test
  public void isFileMappedInputNullOutputFalse() {

    // Arrange
    final ByteBuffer bb = null;

    // Act
    final boolean retval = Helper.isFileMapped(bb);

    // Assert result
    Assert.assertEquals(false, retval);
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 232 branch to line 234
   *  - conditional line 234 branch to line 234
   */

  @Test
  public void pruneFileEndInputNotNullOutputNotNull() {

    // Arrange
    final String file = "!!.";

    // Act
    final String retval = Helper.pruneFileEnd(file);

    // Assert result
    Assert.assertEquals("!!", retval);
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 232 branch to line 233
   */

  @Test
  public void pruneFileEndInputNotNullOutputNotNull2() {

    // Arrange
    final String file = "";

    // Act
    final String retval = Helper.pruneFileEnd(file);

    // Assert result
    Assert.assertEquals("", retval);
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 418 branch to line 419
   */

  @Test
  public void underScoreToCamelCaseInputNotNullOutputNotNull() {

    // Arrange
    final String key = "";

    // Act
    final String retval = Helper.underScoreToCamelCase(key);

    // Assert result
    Assert.assertEquals("", retval);
  }
}
