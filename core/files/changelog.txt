0.3.0
    dijkstraNative is now dijkstraNativebi
    fixed #151
    EncodingManager always takes the encoders in constructor, to force always init
    GraphHopper.setMemory(true, true/false) was refactored to GraphHopper.setMemory(true/false), use mmap config via GraphHopper.setMemoryMapped()
    incompatible edges => you need to re-import data and/or update the edges file
    the instructions of the web response does not contain times (string) but instead millis (long)
    PrepareContractionHierarchies.setPeriodicUpdates is now in percentage not in absolute counts
    improved bike routing #132, #138, #139, #150
    gpx export via API, HTTP (route?type=gpx) and web interface is possible: #113, #136, #141
    breaking: The web response, Path.time and GHResponse.time change to milliseconds and 'long' (instead of seconds and double)

0.2.0
    change inconsistent default settings for contraction hierarchies in the API - see https://lists.openstreetmap.org/pipermail/graphhopper/2013-December/000585.html
    fixed issues with android:
        graphhopper: use maps from 0.2 path; updated maps
        mapsforge: use mapsforge-map dependency; merged #461; avoid duplicates otherwise mapsforge-core would be duplicate (?)
    refactored/renamed classes and methods:
        refactor 'flags' from int to long (still only int is stored)
        replacing Graph.edge(a,b,dist,flags) by Graph.edge(a,b).setDistance().setFlags()
        FlagEncoder.flags => use FlagEncoder.setProperties or separate setAccess and setSpeed method
        renamed LocationIDResult to QueryResult and Location2NodesNtree to LocationIndexTree
        renamed Location2IDIndex to LocationIndex
        renamed WeightCalculation to Weighting and getWeight to calcWeight        
            the URL parameter algoType in web module is now deprecated and 'weighting' should be used
        removed GHDijkstraHeap, GHDijkstraHeap2    
        made DistanceCalc into interface (new DistanceCalcEarth implementation)
        made GraphStorage into interface (new GraphHopperStorage implementation) move some methods from Graph into GraphStorage -> optimize + node removal stuff -> not necessary in algorithms
    incompatible storage layout due to:
        pluggable endianness (#103) -> changed default endianess to LITTLE
    add highly experimental UnsafeDataAccess to speed up search ~15%
    several small bug fixes and improvements
    different edge insert
    important bug fix for edge retrieval which leads to massive speed up in prepare + CH algos
    finally fixed major feature request #27 to allow gps-to-gps queries instead of only junction-to-junction ones.
        follow up in #52 and #115
        slower but more precise and necessary edge distance calculation
    fixed bug #105 for disconnected areas    
    fix which made CH preparation ~5% faster
    more align API for all algorithms. and initCollection is called via 1000 not something depending on the graph size
    API changed
        case of vehicle now case does not matter
        returned distance is in meter now
    better i18n support
    fixed major bug #102 when removing subnetworks
    fixed bug #89 for trams on roads
    completed improvement #93 for ferries
    edge explorer makes none-CH algorithms ~8% faster
    link to all closed issues: https://github.com/graphhopper/graphhopper/issues?milestone=2&state=closed


0.1.1
06 August 2013

    correct maven bundling and some more issues
    more i18n


0.1
23 July 2013

    initial version with lots of features 
    24 closed issues:
        https://github.com/graphhopper/graphhopper/issues?milestone=3&state=closed
    e.g.:
    Route instructions
    Implement OSM import for bike/foot/car
    More compact graph (nodes along a way are stored in a separate storage => faster and reduced RAM usage)
    Made routing working world wide. Make German-sized networks working on Android.
    Made routing faster via bidirectional algorithms, contraction hierarchies, graph sorting, better OSM integration and some fine tuning.
