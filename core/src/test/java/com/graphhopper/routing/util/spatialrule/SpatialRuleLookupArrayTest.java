package com.graphhopper.routing.util.spatialrule;

import com.graphhopper.reader.ReaderWay;
import com.graphhopper.routing.util.DataFlagEncoder;
import com.graphhopper.routing.util.spatialrules.*;
import com.graphhopper.routing.util.spatialrules.countries.GermanySpatialRule;
import com.graphhopper.util.shapes.BBox;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

/**
 * @author Robin Boldt
 */
public class SpatialRuleLookupArrayTest {

    @Test
    public void testSmallScenario(){

        BBox bounds = new BBox(1,4, 1, 4);
        SpatialRuleLookup spatialRuleLookup = new SpatialRuleLookupArray(bounds ,1);
        spatialRuleLookup.addRule(getSpatialRule(), new Polygon(new double[]{1, 1, 2, 2}, new double[]{1, 2, 2, 1}));
        spatialRuleLookup.addRule(getSpatialRule(), new Polygon(new double[]{1, 1, 3.6, 3.6}, new double[]{3, 4, 4, 3}));
        assertEquals(AccessValue.EVENTUALLY_ACCESSIBLE, spatialRuleLookup.lookupRule(1.2, 1.7).isAccessible(null,""));
        assertEquals(AccessValue.EVENTUALLY_ACCESSIBLE, spatialRuleLookup.lookupRule(1.2, 3.7).isAccessible(null,""));
        // Not in the second Polygon anymore, but due to the resolution of 1, this should be still match the rule
        assertEquals(AccessValue.EVENTUALLY_ACCESSIBLE, spatialRuleLookup.lookupRule(3.9, 3.7).isAccessible(null,""));
        assertEquals(AccessValue.ACCESSIBLE, spatialRuleLookup.lookupRule(2.2, 1.7).isAccessible(null,""));

    }

    @Test
    public void testCountryScenario(){

        // Osm countryspecific rules are documented here:
        // https://wiki.openstreetmap.org/wiki/OSM_tags_for_routing/Access-Restrictions

        SpatialRuleLookup spatialRuleLookup = new SpatialRuleLookupArray(new BBox(-180,180,-90,90), .1);

        // Taken from here: https://github.com/johan/world.geo.json/blob/master/countries/DEU.geo.json
        //String germanPolygonJson = "[9.921906,54.983104],[9.93958,54.596642],[10.950112,54.363607],[10.939467,54.008693],[11.956252,54.196486],[12.51844,54.470371],[13.647467,54.075511],[14.119686,53.757029],[14.353315,53.248171],[14.074521,52.981263],[14.4376,52.62485],[14.685026,52.089947],[14.607098,51.745188],[15.016996,51.106674],[14.570718,51.002339],[14.307013,51.117268],[14.056228,50.926918],[13.338132,50.733234],[12.966837,50.484076],[12.240111,50.266338],[12.415191,49.969121],[12.521024,49.547415],[13.031329,49.307068],[13.595946,48.877172],[13.243357,48.416115],[12.884103,48.289146],[13.025851,47.637584],[12.932627,47.467646],[12.62076,47.672388],[12.141357,47.703083],[11.426414,47.523766],[10.544504,47.566399],[10.402084,47.302488],[9.896068,47.580197],[9.594226,47.525058],[8.522612,47.830828],[8.317301,47.61358],[7.466759,47.620582],[7.593676,48.333019],[8.099279,49.017784],[6.65823,49.201958],[6.18632,49.463803],[6.242751,49.902226],[6.043073,50.128052],[6.156658,50.803721],[5.988658,51.851616],[6.589397,51.852029],[6.84287,52.22844],[7.092053,53.144043],[6.90514,53.482162],[7.100425,53.693932],[7.936239,53.748296],[8.121706,53.527792],[8.800734,54.020786],[8.572118,54.395646],[8.526229,54.962744],[9.282049,54.830865],[9.921906,54.983104]";
        // Taken from Natural Earth and made easier
        String germanPolygonJson = "[9.437503026532056,54.81041112705874],[9.579925977000102,54.86627838700018],[9.823741082000083,54.75674062700013],[9.94752037900011,54.779527085000055],[10.02686608200014,54.55996328300007],[9.840098504000082,54.475287177000055],[10.143402540000096,54.491848049000126],[10.141774936000076,54.32440827000009],[10.318369988000086,54.44330475500006],[10.731293165000125,54.31020742400007],[11.135508660000085,54.38589101800015],[11.066579623000052,54.183905341000084],[10.752614780000101,54.05011627800015],[10.902110222000118,53.961371161],[11.175059441000144,54.018011786],[11.242930535000141,53.94521719000012],[11.457692905000044,53.906154690000065],[11.689707879000139,54.15521881700012],[12.088145379000139,54.19407786700005],[12.115000847000118,54.097886460000026],[12.108897332000112,54.183010158000016],[12.533864780000073,54.48826732000008],[12.921153191000144,54.43349844000012],[12.438487175000148,54.38751862200017],[12.412445509000094,54.251410223000065],[12.54078209700009,54.37225983300003],[12.704844597000118,54.41461823100009],[12.684092644000117,54.37225983300003],[12.854665561000047,54.357855536000145],[13.008799675000148,54.438055731000176],[13.114919467000107,54.28001536700005],[13.483571811000104,54.09129466400013],[13.711924675000148,54.17365143400015],[13.808116082000083,54.104681708000115],[13.746104363000143,54.03644440300003],[13.906016472000118,53.94306061400012],[13.817067905000101,53.8529320330001],[14.037445509000122,53.7552757830001],[14.264496290000068,53.751613674000126],[14.21273847700013,53.70807526200012],[14.441629680000062,53.251841126000144],[14.123922973000049,52.85065114400014],[14.644821411000066,52.57692108200014],[14.54539595600005,52.38215260800014],[14.76140344300012,52.07666737900006],[14.585806925000043,51.80389333200013],[14.732464640000074,51.65834665900017],[14.710037068000076,51.53024078400007],[14.95539676900006,51.43541453000002],[14.97999475100005,51.12279795400015],[14.775356079000119,50.812971904000094],[14.61319543500008,50.84557973200005],[14.629215128000112,50.92071726600015],[14.5503568930001,50.91208730100011],[14.48214400200007,51.0371959430001],[14.287530558000071,51.036834208000116],[14.238334595000111,50.982470602000134],[14.381891724000127,50.920872294],[14.346545044000038,50.880202942000054],[13.834534953000087,50.72367502900012],[13.556567423000075,50.7067251590001],[13.447943563000052,50.59727447600007],[13.36877526800015,50.62833201100001],[13.160105835000138,50.497022197000135],[13.00962406400015,50.492681376000164],[12.952573283000078,50.40415964800012],[12.817387736000029,50.44302032500015],[12.510223022000076,50.38876007100011],[12.300416707000068,50.16081532800008],[12.076140991000045,50.31517283100011],[12.246879923000108,50.0449567670001],[12.52407230600005,49.90496531200007],[12.38361576300008,49.74285634400003],[12.643548218000092,49.42949045799999],[12.777906941000111,49.33254547200012],[12.999805542000104,49.29492502900003],[13.178502645000066,49.11834666000014],[13.45889896600005,48.945023906000145],[13.608657267000126,48.94616078700015],[13.815724731000103,48.76643015600003],[13.716505981000125,48.521690572000026],[13.454558146000068,48.57344451900009],[13.405568888000062,48.37658315100002],[12.738942912000113,48.11344675700009],[12.99122725400008,47.84710642600014],[12.892008504000103,47.72354807600006],[13.072049194000044,47.65946929900015],[13.001872599000052,47.46601857600008],[12.778940470000094,47.554824524000125],[12.761990600000075,47.66685902900015],[12.496580444000074,47.628902690000146],[12.424130086000076,47.691560365000086],[12.238715047000113,47.67889963900005],[12.242229044000055,47.73202301100015],[12.1736027420001,47.605079855000085],[11.620458211000113,47.589654440000075],[11.23701908300012,47.39395579000002],[10.979463745000146,47.39054514600018],[10.858644247000115,47.53066579200005],[10.482543172000135,47.532862040000154],[10.429213094000147,47.57701955200007],[10.428282918000093,47.39604868600016],[10.159875529000061,47.27112091100004],[10.209278198000106,47.37248423300018],[10.082877644000064,47.359074199000034],[9.945935099000053,47.540768534],[9.782120809000048,47.58841420500015],[9.612622111000093,47.52188079900016],[9.183397664000069,47.67042470400004],[8.881710652000095,47.65613617000004],[8.58312422700007,47.80023590100011],[8.39099125100006,47.69212880500011],[8.458273966000121,47.63988393200013],[8.607308797000115,47.65629119900008],[8.560696655000072,47.589396057000116],[8.232964721000116,47.621952210000146],[7.683437540000114,47.54425669400014],[7.586028488000125,47.58461854400015],[7.511871785000096,47.70732167600006],[7.621115763000063,47.971439922000016],[7.578947795000119,48.114480286000074],[7.75072025500009,48.341365662000115],[7.810251506000071,48.61501820900018],[8.20030521600006,48.95856313100002],[7.931897827000114,49.034837546000134],[7.634965047000037,49.03778310100013],[7.410482625000043,49.16893788700018],[7.274366902000054,49.10501414000011],[7.042546427000076,49.107597962000014],[6.914388876000146,49.20666168300012],[6.725563192000038,49.155553691000065],[6.511674438000114,49.42473622600009],[6.345307071000093,49.45534865200007],[6.502579387000139,49.79566965800008],[6.222699829000106,49.88713694300013],[6.11748661300004,50.12045603500003],[6.15717411300011,50.222723694000095],[6.372458130000098,50.329435527],[6.336904744000037,50.48100250200018],[6.170816691000113,50.51795115200012],[6.249054809000086,50.614431051000125],[5.994910116000114,50.74992665600014],[6.063743124000041,50.90753977499999],[6.00369510900012,50.97373728400008],[5.874607381000118,50.96536570299999],[5.852489868000106,51.04275116000012],[5.937962687000066,51.03094309500001],[6.147252238000107,51.15225352000006],[6.056611776000096,51.21170725500012],[6.205336548000105,51.45843638200016],[5.931451457000094,51.815649720000025],[6.156140584000127,51.84205637600009],[6.1269950760001,51.89673004100014],[6.344966268000121,51.8211015830001],[6.810725952000098,51.960576274000104],[6.672956583000143,52.050054016],[7.026320027000054,52.23063730900016],[7.048230835000112,52.36507354700011],[6.973300008000138,52.45137319000004],[6.714814494000109,52.4615534470001],[6.671716349000121,52.54167775500018],[6.737035360000078,52.63469533300015],[7.036655314000086,52.64738189700002],[7.19282149300011,52.99800649000015],[7.194590691000116,53.24502187700007],[7.254730665000096,53.31952545800014],[7.366547071000127,53.30280182500012],[7.038259311000104,53.34857819200003],[7.023285352000073,53.45050690300003],[7.141774936000047,53.537176825000145],[7.086761915000068,53.58685944200006],[7.305023634000065,53.684800523000106],[8.031423373000052,53.70807526200012],[8.167979363000143,53.55320872600005],[8.076996290000096,53.46869538000011],[8.20533287900011,53.410711981000034],[8.315114780000101,53.47492096600017],[8.231211785000113,53.525213934000035],[8.270681186000076,53.61286041900014],[8.55209394600007,53.543605861000074],[8.504405144000089,53.35805898600002],[8.565765821000099,53.54669830900015],[8.486094597000118,53.70042552299999],[8.651866082000083,53.89248281500012],[8.860687696000127,53.83100006700006],[9.274668816000144,53.865139065000065],[9.567067905000073,53.599595445000105],[9.832041863000143,53.543605861000074],[9.583669467000021,53.61245351800015],[9.395192905000044,53.83100006700006],[8.916026238000143,53.93740469000015],[8.83334394600007,54.03644440300003],[8.997243686000047,54.03021881700006],[9.018321160000141,54.097886460000026],[8.812836134000122,54.18048737200009],[8.963145379000139,54.31761302300005],[8.678477410000113,54.269191799000154],[8.59986412900011,54.33808014500012],[8.695567254000139,54.358587958000086],[8.648448113000143,54.406398830000015],[8.88607832100007,54.41779205900015],[9.01156660200013,54.50633372599999],[8.688731316000144,54.735296942],[8.660816132543687,54.896303911092375],[9.437503026532056,54.81041112705874]";
        Polygon germanPolygon = parsePolygonString(germanPolygonJson);

        spatialRuleLookup.addRule(new GermanySpatialRule(), germanPolygon);

        // Taken from here: https://github.com/johan/world.geo.json/blob/master/countries/AUT.geo.json
        String austrianPolygonJson = "[16.979667,48.123497],[16.903754,47.714866],[16.340584,47.712902],[16.534268,47.496171],[16.202298,46.852386],[16.011664,46.683611],[15.137092,46.658703],[14.632472,46.431817],[13.806475,46.509306],[12.376485,46.767559],[12.153088,47.115393],[11.164828,46.941579],[11.048556,46.751359],[10.442701,46.893546],[9.932448,46.920728],[9.47997,47.10281],[9.632932,47.347601],[9.594226,47.525058],[9.896068,47.580197],[10.402084,47.302488],[10.544504,47.566399],[11.426414,47.523766],[12.141357,47.703083],[12.62076,47.672388],[12.932627,47.467646],[13.025851,47.637584],[12.884103,48.289146],[13.243357,48.416115],[13.595946,48.877172],[14.338898,48.555305],[14.901447,48.964402],[15.253416,49.039074],[16.029647,48.733899],[16.499283,48.785808],[16.960288,48.596982],[16.879983,48.470013],[16.979667,48.123497]";
        Polygon austrianPolygon = parsePolygonString(austrianPolygonJson);

        spatialRuleLookup.addRule(new SpatialRule() {
            @Override
            public int getMaxSpeed(ReaderWay readerWay, String transportationMode) {
                return 0;
            }

            @Override
            public AccessValue isAccessible(ReaderWay readerWay, String transportationMode) {
                if(readerWay.hasTag("highway", "track")){
                    return AccessValue.ACCESSIBLE;
                }else if(readerWay.hasTag("highway", "living_street")) {
                    return AccessValue.EVENTUALLY_ACCESSIBLE;
                }else {
                    return AccessValue.ACCESSIBLE;
                }
            }

            @Override
            public String getCountryIsoA3Name() {
                return null;
            }
        }, austrianPolygon);



        ReaderWay track = new ReaderWay(0);
        track.setTag("highway", "track");

        ReaderWay primary = new ReaderWay(0);
        primary.setTag("highway", "primary");

        ReaderWay livingStreet = new ReaderWay(0);
        livingStreet.setTag("highway", "living_street");

        // Berlin
        assertEquals(AccessValue.NOT_ACCESSIBLE, spatialRuleLookup.lookupRule(52.5243700, 13.4105300).isAccessible(track, ""));
        assertEquals(AccessValue.ACCESSIBLE, spatialRuleLookup.lookupRule(52.5243700, 13.4105300).isAccessible(primary, ""));

        // Paris
        assertEquals(AccessValue.ACCESSIBLE, spatialRuleLookup.lookupRule(48.864716, 2.349014).isAccessible(track, ""));
        assertEquals(AccessValue.ACCESSIBLE, spatialRuleLookup.lookupRule(48.864716, 2.349014).isAccessible(primary, ""));

        // Vienna
        assertEquals(AccessValue.ACCESSIBLE, spatialRuleLookup.lookupRule(48.210033, 16.363449).isAccessible(track, ""));
        assertEquals(AccessValue.ACCESSIBLE, spatialRuleLookup.lookupRule(48.210033, 16.363449).isAccessible(primary, ""));
        assertEquals(AccessValue.EVENTUALLY_ACCESSIBLE, spatialRuleLookup.lookupRule(48.210033, 16.363449).isAccessible(livingStreet, ""));
    }

    private Polygon parsePolygonString(String polygonString){
        String[] germanPolygonArr = polygonString.split("\\],\\[");
        double[] lats = new double[germanPolygonArr.length];
        double[] lons = new double[germanPolygonArr.length];
        for (int i = 0; i < germanPolygonArr.length; i++) {
            String temp = germanPolygonArr[i];
            temp = temp.replaceAll("\\[", "");
            temp = temp.replaceAll("\\]", "");
            String[] coords = temp.split(",");
            lats[i] = Double.parseDouble(coords[1]);
            lons[i] = Double.parseDouble(coords[0]);
        }

        return new Polygon(lats, lons);
    }

    private SpatialRule getSpatialRule(){
        return new SpatialRule() {
            @Override
            public int getMaxSpeed(ReaderWay readerWay, String transportationMode) {
                return 0;
            }

            @Override
            public AccessValue isAccessible(ReaderWay readerWay, String transportationMode) {
                return AccessValue.EVENTUALLY_ACCESSIBLE;
            }

            @Override
            public String getCountryIsoA3Name() {
                return null;
            }
        };
    }

}
