/*
 * Copyright 2018 Diffblue Limited
 *
 * Diffblue Limited licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.graphhopper.tools;

import com.graphhopper.tools.Bzip2;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import java.io.IOException;
import java.lang.reflect.Method;

public class Bzip2_DiffblueTest {

  @Rule public ExpectedException thrown = ExpectedException.none();

  /* testedClasses: Bzip2 */

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 32 branch to line 33
   */

  @Test
  public void mainInput0OutputIllegalArgumentException() throws IOException {

    // Arrange
    final String[] args = {};

    // Act
    thrown.expect(IllegalArgumentException.class);
    Bzip2.main(args);

    // Method is not expected to return due to exception thrown
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 32 branch to line 36
   *  - conditional line 37 branch to line 38
   */

  @Test
  public void mainInput1OutputIllegalArgumentException() throws IOException {

    // Arrange
    final String[] args = {""};

    // Act
    thrown.expect(IllegalArgumentException.class);
    Bzip2.main(args);

    // Method is not expected to return due to exception thrown
  }
}
