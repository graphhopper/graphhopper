/*
 * Copyright 2018 Diffblue Limited
 *
 * Diffblue Limited licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.graphhopper.http;

import com.graphhopper.MultiException;
import com.graphhopper.http.MultiExceptionGPXMessageBodyWriter;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PowerMockIgnore;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

import java.io.IOException;
import java.io.OutputStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.Type;
import java.util.ArrayList;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.MultivaluedMap;

@PowerMockIgnore({"javax.management.*"})
@RunWith(PowerMockRunner.class)
public class MultiExceptionGPXMessageBodyWriter_DiffblueTest {

  @Rule public ExpectedException thrown = ExpectedException.none();

  /* testedClasses: MultiExceptionGPXMessageBodyWriter */

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 60 branch to line 60
   *  - conditional line 60 branch to line 61
   */
  @PrepareForTest({MultiException.class})
  @Test
  public void writeToInputNotNullNullNullNullNullNullNullOutputRuntimeException()
      throws Exception, IOException, WebApplicationException {

    // Arrange
    final MultiExceptionGPXMessageBodyWriter objectUnderTest =
        new MultiExceptionGPXMessageBodyWriter();
    final MultiException e = PowerMockito.mock(MultiException.class);
    final ArrayList arrayList = new ArrayList();
    PowerMockito.doReturn(arrayList).when(e);
    e.getErrors();
    final Class type = null;
    final Type genericType = null;
    final Annotation[] annotations = null;
    final MediaType mediaType = null;
    final MultivaluedMap httpHeaders = null;
    final OutputStream entityStream = null;

    // Act
    thrown.expect(RuntimeException.class);
    objectUnderTest.writeTo(e, type, genericType, annotations, mediaType, httpHeaders,
                            entityStream);

    // Method is not expected to return due to exception thrown
  }
}
