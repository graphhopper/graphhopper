##### Vehicles #####

# Possible options: car,foot,bike,bike2,mtb,racingbike,motorcycle (comma separated)
# bike2 takes elevation data into account (like up-hill is slower than down-hill) and requires enabling graph.elevation.provider below
graph.flag_encoders=car

# Enable turn restrictions for car or motorcycle. 
# Currently you need to additionally set prepare.chWeightings=no before using this (see below and #270)
# graph.flag_encoders=car|turn_costs=true



##### Elevation #####

# To populate your graph with elevation data use SRTM, default is noop (no elevation)
# graph.elevation.provider=srtm

# default location for cache is /tmp/srtm
# graph.elevation.cache_dir=./srtmprovider/

# If you have a slow disk or plenty of RAM change the default MMAP to:
# graph.elevation.dataaccess=RAM_STORE



#### Speed-up mode vs. flexibility mode ####

# By default the speed-up mode with the 'fastest' weighting is used. Internally a graph preparation via
# contraction hierarchies (CH) is done to speed routing up. This requires more RAM/disc space for holding the
# graph but less for every request. You can also setup multiple weightings, by providing a coma separated list.
prepare.ch.weightings=fastest

# Disable the speed-up mode. Should be use only with routing.maxVisitedNodes
# prepare.ch.weightings=no

# To make preparation faster for multiple flagEncoders you can increase the default threads if you have enough RAM.
# Change this setting only if you know what you are doing and if the default worked for you and really make sure you have enough RAM!
# prepare.threads=1



##### Routing #####

# You can define the maximum visited nodes when routing. This may result in not found connections if there is no
# connection between two points wihtin the given visited nodes. The default is Integer.MAX_VALUE. Useful for flexibility mode
# routing.max_visited_nodes = 1000000

# If enabled, allows a user to run flexibility requests even if speed-up mode is enabled. Every request then has to include a hint routing.flexibleMode.force=true.
# Attention, non-CH route calculations take way more time and resources, compared to CH routing.
# A possible attacker might exploit this to slow down your service. Only enable it if you need it and with routing.maxVisitedNodes
# routing.ch.disabling_allowed=true



##### Web #####

# if you want to support jsonp response type you need to add it explicitely here. By default it is disabled for stronger security.
# web.jsonp_allowed=true



##### Storage #####
#
# configure the memory access, use RAM_STORE for well equipped servers (default and recommended) or MMAP_STORE_SYNC
graph.dataaccess=RAM_STORE

# if you don't need turn instruction, you can reduce storage size by not storing way names:
# osmreader.instructions=false

# will write way names in the preferred language (language code as defined in ISO 639-1 or ISO 639-2):
# osmreader.preferred_language=en
