/*
 * Copyright 2018 Diffblue Limited
 *
 * Diffblue Limited licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.graphhopper.tools;

import static org.mockito.AdditionalMatchers.or;
import static org.mockito.Matchers.anyBoolean;
import static org.mockito.Matchers.anyDouble;
import static org.mockito.Matchers.anyInt;
import static org.mockito.Matchers.anyLong;
import static org.mockito.Matchers.isA;
import static org.mockito.Matchers.isNull;
import static org.powermock.api.mockito.PowerMockito.mockStatic;

import com.graphhopper.tools.QueryTorture;
import com.graphhopper.util.CmdArgs;
import com.graphhopper.util.Helper;
import org.junit.Assert;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.api.mockito.expectation.PowerMockitoStubber;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

@RunWith(PowerMockRunner.class)
public class QueryTorture_DiffblueTest {

  @Rule public ExpectedException thrown = ExpectedException.none();

  /* testedClasses: QueryTorture */

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 63 branch to line 63
   */
  @PrepareForTest({Helper.class, CmdArgs.class})
  @Test
  public void mainInput0OutputIllegalArgumentException() throws Exception {

    // Setup mocks
    mockStatic(CmdArgs.class);
    mockStatic(Helper.class);

    // Arrange
    final String[] args = {};
    PowerMockito.doReturn(true).when(Helper.class);
    Helper.isEmpty(or(isA(String.class), isNull(String.class)));
    final CmdArgs cmdArgs = PowerMockito.mock(CmdArgs.class);
    PowerMockito.doReturn(-7_091_904_717_289_717_793L).when(cmdArgs);
    cmdArgs.getLong(or(isA(String.class), isNull(String.class)), anyLong());
    ((PowerMockitoStubber)PowerMockito.doReturn(0).doReturn(0)).when(cmdArgs);
    cmdArgs.getInt(or(isA(String.class), isNull(String.class)), anyInt());
    PowerMockito.doReturn(0.0).when(cmdArgs);
    cmdArgs.getDouble(or(isA(String.class), isNull(String.class)), anyDouble());
    PowerMockito.doReturn(false).when(cmdArgs);
    cmdArgs.getBool(or(isA(String.class), isNull(String.class)), anyBoolean());
    ((PowerMockitoStubber)PowerMockito.doReturn("").doReturn("???route")).when(cmdArgs);
    cmdArgs.get(or(isA(String.class), isNull(String.class)),
                or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(cmdArgs).when(CmdArgs.class);
    CmdArgs.read(or(isA(String[].class), isNull(String[].class)));

    // Act
    thrown.expect(IllegalArgumentException.class);
    QueryTorture.main(args);

    // Method is not expected to return due to exception thrown
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 75 branch to line 76
   */
  @PrepareForTest({Helper.class, CmdArgs.class})
  @Test
  public void startInputNotNullOutputIllegalArgumentException() throws Exception {

    // Setup mocks
    mockStatic(Helper.class);

    // Arrange
    final QueryTorture objectUnderTest = new QueryTorture();
    final CmdArgs cmdArgs = PowerMockito.mock(CmdArgs.class);
    PowerMockito.doReturn(false).when(cmdArgs);
    cmdArgs.getBool(or(isA(String.class), isNull(String.class)), anyBoolean());
    ((PowerMockitoStubber)PowerMockito.doReturn("").doReturn("rrroute")).when(cmdArgs);
    cmdArgs.get(or(isA(String.class), isNull(String.class)),
                or(isA(String.class), isNull(String.class)));
    PowerMockito.doReturn(0L).when(cmdArgs);
    cmdArgs.getLong(or(isA(String.class), isNull(String.class)), anyLong());
    ((PowerMockitoStubber)PowerMockito.doReturn(0).doReturn(0)).when(cmdArgs);
    cmdArgs.getInt(or(isA(String.class), isNull(String.class)), anyInt());
    PowerMockito.doReturn(0.0).when(cmdArgs);
    cmdArgs.getDouble(or(isA(String.class), isNull(String.class)), anyDouble());
    PowerMockito.doReturn(true).when(Helper.class);
    Helper.isEmpty(or(isA(String.class), isNull(String.class)));

    // Act
    thrown.expect(IllegalArgumentException.class);
    objectUnderTest.start(cmdArgs);

    // Method is not expected to return due to exception thrown
  }
}
