0.4.0
    create location index before preparation in the GraphHopper class
    encodingManager.getSingle() is removed as one can specify an encoder explicitly. GraphHopper picks the first encoder automatically for default vehicle, can be overwritten via setDefaultVehicle
    removed LocationIndexTreeSC, use new LocationIndexTree(levelGraph.getOriginalGraph(), directory) instead
    getLevel and setLevel do no longer automatically increase node count, use getNodeAccess.ensureNode for that
    normal algorithms are now possible on prepared graph use getOriginalGraph, see #116
    GHResponse no longer has isFound method, use !hasErrors instead
    merged unused Edge class into EdgeEntry
    astar and astarbi are now both none-heuristic and take parameters for beeline approximation: astar.approximation=BeelineSimplification|BeelineAccurate or astarbi.approximation=...
    making GPX export according to the schema to support import from various tools like basecamp
    refactoring: AllEdgesIterator.getMaxId is now named getCount
    major change of internal API: moved method "Path RoutingAlgorithm.calcPath(QueryResult,QueryResult)" to a helper method QueryGraph.lookup, call queryResult.getClosestNode for the calcPath(nodeFrom,nodeTo) method
    no cachedWays and cachedPoints in Path anymore
    Path.findInstruction was moved to InstructionList.find
    if start and end point are identical an algorithm will find the path consisting only of one node, one point and one instruction (finish instruction), but without edges
    astarbi has new default values for approximation (false) and approximation_factor (1.2) in RoutingAlgorithmFactorySimple
    instead of strings use the variables in AlgorithmOptions to specify an algorithm
    use RoutingAlgorithmFactorySimple instead of RoutingAlgorithmFactory, also more constistent algorithm preparation handling due to new AlgorithmOptions, therefor removed NoOpAlgorithmPreparation
    GHResponse.getXX methods now fail fast (throw an exception) if an error while route calculation occured. See #287
    renamed less often used URL parameter 'min_path_precision' to way_point_max_distance which makes it identical to the setWayPointMaxDistance method used for simplification at OSMImport
    removed douglas.minprecision from Java API ghRequest.hints => use wayPointMaxDistance instead
    encoder.supportTurnCost is replaced by encoder.supports(TurnWeighting.class)
    CmdArgs is now a Map<String, String> instead Map<String, Object>. The value will be parsed up on every getXY call
    removed GHRequest.getHint, instead use the provided methods in GHRequest.getHints().getXY and GHRequest.getHints().put
    graph incompatibility as properties cannot be loaded => version increase necessary
        renamed osmreader.bytesForFlags to graph.bytesForFlags
        renamed config property osmreader.acceptWay to graph.flagEncoders
    default weighting is now fastest, fixing #261
    moved method GraphHopper.main into tools module and class com.graphhopper.tools.Import, see #250
    refactored GraphHopper.createWeighting to accept more than one configuration option, see #237
    refactored GraphHopper.disableCHShortcuts to setCHEnable(boolean)
    moving the boolean parameter of GraphHopper.setInMemory into a separate method setStoreOnFlush
    renaming of GraphHopper.setCHShortcuts to setCHWeighting, as well as the property prepare.chShortcuts to prepare.chWeighting
    jsonp is disabled by default. You need to enable it in the config.properties, see the config-example.properties
    EncodingManager cannot be null in GraphHopperStorage since 0.4. If you need to parse EncodingManager configuration from existing graph use EncodingManager.create
    no reflection done in EncodingManager which improves portability and makes configuration of encoders possible before adding to manager
    removed dijkstraNativebi as no performance advantage but maintenance disadvantage and similar to oneToManyDijkstra
    to provide context for turn costs we needed to add prevEdgeId into Weighting.calcWeight, see new documentation
    with the introduction of lock protection mechanism (see #112) GraphHopper needs always write access, see also #217
    new GraphHopper.clean method to remove the graph directory via Java API
    FlagEncoder: replaced isFoward and isBackward with more generic isBool(flags, FlagEncoder.FORWARD|BACKWARD)

0.3.0
    introduced prefer bits, now bike uses more bits and 3 bike encoder do not fit into 32 bit anymore, will be fixed later
    moved Translation argument into Path.calcInstruction for more fine grained control, instructions are now uncached and GHRequest: new locale parameter
    CoordTrig and the like are removed, GHPlace is mostly replaced by GHPoint and so GHRequest has now methods ala addPoint instead
    removed isBoth from AbstractFlagEncoder, moved canBeOverwritten and associated test to PrepareEncoder
    removed unused directory.rename
    refactor edge.copyProperties into copyPropertiesTo to have similar semantics as Graph.copyTo
    calcWeight now contains reverse boolean to calculate correct direction dependent weight
    completely different web API response format. see docs/web
    swapDirections is renamed to reverseFlags (EncodingManager and FlagEncoders)
    edgeState.detach has now a reverse parameter, just use false to get previous results
    web api: buildDate contains now timezone, algoType is replaced with weighting
    dijkstraNative is now dijkstraNativebi
    fixed #151
    calcWeight now contains reverse boolean to calculate correct direction dependent weight
    EncodingManager always takes the encoders in constructor, to force always init
    GraphHopper.setMemory(true, true/false) was refactored to GraphHopper.setMemory(true/false), use mmap config via GraphHopper.setMemoryMapped()
    incompatible edges => you need to re-import data and/or update the edges file
    the instructions of the web response does not contain times (string) but instead millis (long)
    PrepareContractionHierarchies.setPeriodicUpdates is now in percentage not in absolute counts
    improved bike routing #132, #138, #139, #150
    gpx export via API, HTTP (route?type=gpx) and web interface is possible: #113, #136, #141   

0.2.0
23 Nov 2013

    change inconsistent default settings for contraction hierarchies in the API - see https://lists.openstreetmap.org/pipermail/graphhopper/2013-December/000585.html
    fixed issues with android:
        graphhopper: use maps from 0.2 path; updated maps
        mapsforge: use mapsforge-map dependency; merged #461; avoid duplicates otherwise mapsforge-core would be duplicate (?)
    refactored/renamed classes and methods:
        refactor 'flags' from int to long (still only int is stored)
        replacing Graph.edge(a,b,dist,flags) by Graph.edge(a,b).setDistance().setFlags()
        FlagEncoder.flags => use FlagEncoder.setProperties or separate setAccess and setSpeed method
        renamed LocationIDResult to QueryResult and Location2NodesNtree to LocationIndexTree
        renamed Location2IDIndex to LocationIndex
        renamed WeightCalculation to Weighting and getWeight to calcWeight        
            the URL parameter algoType in web module is now deprecated and 'weighting' should be used
        removed GHDijkstraHeap, GHDijkstraHeap2    
        made DistanceCalc into interface (new DistanceCalcEarth implementation)
        made GraphStorage into interface (new GraphHopperStorage implementation) move some methods from Graph into GraphStorage -> optimize + node removal stuff -> not necessary in algorithms
    incompatible storage layout due to:
        pluggable endianness (#103) -> changed default endianess to LITTLE
    add highly experimental UnsafeDataAccess to speed up search ~15%
    several small bug fixes and improvements
    different edge insert
    important bug fix for edge retrieval which leads to massive speed up in prepare + CH algos
    finally fixed major feature request #27 to allow gps-to-gps queries instead of only junction-to-junction ones.
        follow up in #52 and #115
        slower but more precise and necessary edge distance calculation
    fixed bug #105 for disconnected areas    
    fix which made CH preparation ~5% faster
    more align API for all algorithms. and initCollection is called via 1000 not something depending on the graph size
    API changed
        case of vehicle now case does not matter
        returned distance is in meter now
    better i18n support
    fixed major bug #102 when removing subnetworks
    fixed bug #89 for trams on roads
    completed improvement #93 for ferries
    edge explorer makes none-CH algorithms ~8% faster
    link to all closed issues: https://github.com/graphhopper/graphhopper/issues?milestone=2&state=closed


0.1.1
06 August 2013

    correct maven bundling and some more issues
    more i18n


0.1
23 July 2013

    initial version with lots of features 
    24 closed issues:
        https://github.com/graphhopper/graphhopper/issues?milestone=3&state=closed
    e.g.:
    Route instructions
    Implement OSM import for bike/foot/car
    More compact graph (nodes along a way are stored in a separate storage => faster and reduced RAM usage)
    Made routing working world wide. Make German-sized networks working on Android.
    Made routing faster via bidirectional algorithms, contraction hierarchies, graph sorting, better OSM integration and some fine tuning.
