#################
### OSMReader ###

graph.dataaccess=inmemory+save

# The high-resolution index is bigger and slightly slower but a lot more precise. see #17.
# Resolution is in meter, decrease from 1000 to 500 in order to speed up queries (but will increase size)
#index.highResolution=-1
index.highResolution=500


# use contraction hierarchies to speed things up. requires more RAM/disc space for holding the graph
# uncomment this if you need more control of you algorithm. then use graphhopper.chShortcuts(false, false)
prepare.chShortcuts=fastest


# increase from 1 to 5, to reduce way geometry e.g. for android
osmreader.wayPointMaxDistance=1

# possible options: CAR,FOOT,BIKE (comma separated)
osmreader.acceptWay=CAR


### default algorithm can be overwritten via the URL parameter &algorithm=<algo>
### if you use fast routing you have to use dijkstrabi (bidirectional dijkstra)
#web.defaultAlgorithm=astarbi
#web.defaultAlgorithm=astar
routing.defaultAlgorithm=dijkstrabi

